{
  "rules": {

    "players": {
      "$playerID": {
        ".read": "true",
        ".write": "auth != null && auth.uid === $playerID",
        /*"mask": { ".validate": "newData.isString()" },*/
        "$other": { ".validate": "false" },
      },
    },

    "playerFriends": {
      "$playerID": {
        ".read": "auth != null && auth.uid === $playerID",
        ".write": "auth != null && auth.uid === $playerID",
        "$friendID": {
          ".validate": "
               root.child('players').hasChild($friendID)
            && newData.isBoolean()
          ",
        },
      },
    },

    "games": {
      "$gameID": {
        ".read": "true",
        ".write": "
          auth.lootmaster === true
          || (auth != null && newData.child('started').val() != true)
        ",
        "started": { ".validate": "newData.isBoolean()" },
        "teams": {
          "$teamID": {
            ".validate": "$teamID === '1' || $teamID === '2'",
            "$playerID": {
              ".validate": "
                (
                     auth.uid === $gameID || auth.lootmaster === true
                  || root.child('gameTeamRequests').child($gameID).child($teamID).hasChild($playerID)
                  || ($playerID === auth.uid && !newData.exists())
                )
                && (newData.isBoolean() || !newData.exists())
                && (!data.parent().parent().child('1').hasChild($playerID) || !newData.exists())
                && (!data.parent().parent().child('2').hasChild($playerID) || !newData.exists())
              ",
              "$other": { ".validate": "false" },
            },
          },
        },
        "$other": { ".validate": "false" },
      },
    },

    "gameTeamRequests": {
      "$gameID": {
        ".read": "auth != null",
        ".write": "auth != null",
        "$teamID": {
          ".validate": "$teamID === '1' || $teamID === '2'",
          "$playerID": {
            ".validate": "
              (auth.uid === $playerID || auth.uid === $gameID)
              && (
                (
                  !newData.exists()
                ) || (
                     !data.parent().parent().child('1').hasChild($playerID)
                  && !data.parent().parent().child('2').hasChild($playerID)
                  && newData.isBoolean()
                )
              )
            ",
          },
        },
      },
    },

    "gamePlayers": {
      "$gameID": {
        ".read": "true",
        ".write": "auth.lootmaster === true",
      },
    },

    "gameInventories": {
      "$gameID": {
        ".write": "auth.lootmaster === true",
        "$playerID": {
          ".read": "auth.uid === $playerID", /* || isTeamMate */
        },
      },
    },

    "gameStatuses": {
      "$gameID": {
        ".read": "true",
        ".write": "auth.lootmaster === true",
      },
    },

    "actionQueue": {
      ".read": "auth.lootmaster === true",
      "tasks": {
        ".indexOn": "_state",

        "$taskId": {
          ".write": " (auth.uid != null && !data.exists()) || auth.lootmaster === true",
          ".validate": "
            newData.hasChildren(['request'])
            || (
              auth.lootmaster === true
              && newData.hasChildren(['_state', '_state_changed', '_progress'])
            )
          ",

          "request": {
            ".validate": "newData.hasChildren(['playerID', 'gameID', 'action', 'time']) || auth.lootmaster === true",
            "playerID": { ".validate": "newData.val() === auth.uid || auth.lootmaster === true", },
            "gameID": { ".validate": "root.child('games').hasChild(newData.val())", },
            "action": { ".validate": "newData.isString()" },
            "time":   { ".validate": "newData.val() === now || auth.lootmaster === true" },
            "$other": { ".validate": "false" },
          },

          "_state": {
            ".validate": "newData.isString()"
          },
          "_state_changed": {
            ".validate": "newData.isNumber() && (newData.val() === now
                          || data.val() === newData.val())"
          },
          "_owner": {
            ".validate": "newData.isString()"
          },
          "_progress": {
            ".validate": "newData.isNumber()
                          && newData.val() >= 0
                          && newData.val() <= 100"
          },
          "_error_details": {
              "error": {
                ".validate": "newData.isString()"
              },
              "error_stack": {
                ".validate": "newData.isString()"
              },
              "previous_state": {
                ".validate": "newData.isString()"
              },
              "original_task": {},
              "attempts": {
                ".validate": "newData.isNumber() && newData.val() > 0"
              },
              "$other": {
                ".validate": false
              }
          },
          "_id": {
            ".validate": "newData.isString()"
          },
        },
      },

      "specs" : {
        ".read": "auth.lootmaster === true",
        ".write": "auth.lootmaster === true",
        "$specId": {
          ".validate": "newData.hasChild('in_progress_state')",
          "start_state":       { ".validate": "newData.isString()" },
          "in_progress_state": { ".validate": "newData.isString()" },
          "finished_state":    { ".validate": "newData.isString()" },
          "error_state":       { ".validate": "newData.isString()" },
          "timeout":           { ".validate": "newData.isNumber() && newData.val() > 0" },
          "$other":            { ".validate": false },
        },
      },
    },

    "gameQueue": {
      ".read": "auth.lootmaster === true",
      "tasks": {
        ".indexOn": "_state",

        "$taskId": {
          ".write": " (auth.uid != null && !data.exists()) || auth.lootmaster === true",
          ".validate": "
            newData.hasChildren(['request'])
            || (
              auth.lootmaster === true
              && newData.hasChildren(['_state', '_state_changed', '_progress'])
            )
          ",

          "request": {
            ".validate": "newData.hasChildren(['playerID', 'gameID', 'action', 'time']) || auth.lootmaster === true",
            "playerID": { ".validate": "newData.val() === auth.uid || auth.lootmaster === true", },
            "gameID": { ".validate": "root.child('games').hasChild(newData.val())", },
            "action": { ".validate": "newData.isString()" },
            "time":   { ".validate": "newData.val() === now || auth.lootmaster === true" },
            "$other": { ".validate": "false" },
          },

          "_state": {
            ".validate": "newData.isString()"
          },
          "_state_changed": {
            ".validate": "newData.isNumber() && (newData.val() === now
                          || data.val() === newData.val())"
          },
          "_owner": {
            ".validate": "newData.isString()"
          },
          "_progress": {
            ".validate": "newData.isNumber()
                          && newData.val() >= 0
                          && newData.val() <= 100"
          },
          "_error_details": {
              "error": {
                ".validate": "newData.isString()"
              },
              "error_stack": {
                ".validate": "newData.isString()"
              },
              "previous_state": {
                ".validate": "newData.isString()"
              },
              "original_task": {},
              "attempts": {
                ".validate": "newData.isNumber() && newData.val() > 0"
              },
              "$other": {
                ".validate": false
              }
          },
          "_id": {
            ".validate": "newData.isString()"
          },
        },
      },

      "specs" : {
        ".read": "auth.lootmaster === true",
        ".write": "auth.lootmaster === true",
        "$specId": {
          ".validate": "newData.hasChild('in_progress_state')",
          "start_state":       { ".validate": "newData.isString()" },
          "in_progress_state": { ".validate": "newData.isString()" },
          "finished_state":    { ".validate": "newData.isString()" },
          "error_state":       { ".validate": "newData.isString()" },
          "timeout":           { ".validate": "newData.isNumber() && newData.val() > 0" },
          "$other":            { ".validate": false },
        },
      },
    },

  },
}
